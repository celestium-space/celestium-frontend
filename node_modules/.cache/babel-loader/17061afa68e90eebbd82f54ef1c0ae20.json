{"ast":null,"code":"import * as wasm from './rusty_web_bg.wasm';\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\nlet cachedTextDecoder = new lTextDecoder('utf-8', {\n  ignoreBOM: true,\n  fatal: true\n});\ncachedTextDecoder.decode();\nlet cachegetUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\nlet cachedTextEncoder = new lTextEncoder('utf-8');\nconst encodeString = typeof cachedTextEncoder.encodeInto === 'function' ? function (arg, view) {\n  return cachedTextEncoder.encodeInto(arg, view);\n} : function (arg, view) {\n  const buf = cachedTextEncoder.encode(arg);\n  view.set(buf);\n  return {\n    read: arg.length,\n    written: buf.length\n  };\n};\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n  if (realloc === undefined) {\n    const buf = cachedTextEncoder.encode(arg);\n    const ptr = malloc(buf.length);\n    getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n    WASM_VECTOR_LEN = buf.length;\n    return ptr;\n  }\n\n  let len = arg.length;\n  let ptr = malloc(len);\n  const mem = getUint8Memory0();\n  let offset = 0;\n\n  for (; offset < len; offset++) {\n    const code = arg.charCodeAt(offset);\n    if (code > 0x7F) break;\n    mem[ptr + offset] = code;\n  }\n\n  if (offset !== len) {\n    if (offset !== 0) {\n      arg = arg.slice(offset);\n    }\n\n    ptr = realloc(ptr, len, len = offset + arg.length * 3);\n    const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n    const ret = encodeString(arg, view);\n    offset += ret.written;\n  }\n\n  WASM_VECTOR_LEN = offset;\n  return ptr;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n  const ptr = malloc(arg.length * 1);\n  getUint8Memory0().set(arg, ptr / 1);\n  WASM_VECTOR_LEN = arg.length;\n  return ptr;\n}\n/**\n* @param {string} name\n* @param {Uint8Array} celestium_bin\n* @param {Uint8Array} pk_bin\n* @param {Uint8Array} sk_bin\n*/\n\n\nexport function create_wallet(name, celestium_bin, pk_bin, sk_bin) {\n  var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n  var len0 = WASM_VECTOR_LEN;\n  var ptr1 = passArray8ToWasm0(celestium_bin, wasm.__wbindgen_malloc);\n  var len1 = WASM_VECTOR_LEN;\n  var ptr2 = passArray8ToWasm0(pk_bin, wasm.__wbindgen_malloc);\n  var len2 = WASM_VECTOR_LEN;\n  var ptr3 = passArray8ToWasm0(sk_bin, wasm.__wbindgen_malloc);\n  var len3 = WASM_VECTOR_LEN;\n  wasm.create_wallet(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n}\nexport const __wbg_alert_04502d38f1ea7e89 = function (arg0, arg1) {\n  alert(getStringFromWasm0(arg0, arg1));\n};","map":{"version":3,"sources":["/home/zander/Projects/artificialMind/celestium/celestium-wasm/pkg/rusty_web_bg.js"],"names":["wasm","lTextDecoder","TextDecoder","module","require","cachedTextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","memory","Uint8Array","getStringFromWasm0","ptr","len","subarray","WASM_VECTOR_LEN","lTextEncoder","TextEncoder","cachedTextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","passStringToWasm0","malloc","realloc","undefined","mem","offset","code","charCodeAt","slice","ret","passArray8ToWasm0","create_wallet","name","celestium_bin","pk_bin","sk_bin","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","ptr1","len1","ptr2","len2","ptr3","len3","__wbg_alert_04502d38f1ea7e89","arg0","arg1","alert"],"mappings":"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","sourcesContent":["import * as wasm from './rusty_web_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {string} name\n* @param {Uint8Array} celestium_bin\n* @param {Uint8Array} pk_bin\n* @param {Uint8Array} sk_bin\n*/\nexport function create_wallet(name, celestium_bin, pk_bin, sk_bin) {\n    var ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ptr1 = passArray8ToWasm0(celestium_bin, wasm.__wbindgen_malloc);\n    var len1 = WASM_VECTOR_LEN;\n    var ptr2 = passArray8ToWasm0(pk_bin, wasm.__wbindgen_malloc);\n    var len2 = WASM_VECTOR_LEN;\n    var ptr3 = passArray8ToWasm0(sk_bin, wasm.__wbindgen_malloc);\n    var len3 = WASM_VECTOR_LEN;\n    wasm.create_wallet(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n}\n\nexport const __wbg_alert_04502d38f1ea7e89 = function(arg0, arg1) {\n    alert(getStringFromWasm0(arg0, arg1));\n};\n\n"]},"metadata":{},"sourceType":"module"}