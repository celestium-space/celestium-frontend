{"ast":null,"code":"import * as wasm from './celestium_wasm_bg.wasm';\nconst heap = new Array(32).fill(undefined);\nheap.push(undefined, null, true, false);\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n  if (heap_next === heap.length) heap.push(heap.length + 1);\n  const idx = heap_next;\n  heap_next = heap[idx];\n  if (typeof heap_next !== 'number') throw new Error('corrupt heap');\n  heap[idx] = obj;\n  return idx;\n}\n\nfunction getObject(idx) {\n  return heap[idx];\n}\n\nfunction dropObject(idx) {\n  if (idx < 36) return;\n  heap[idx] = heap_next;\n  heap_next = idx;\n}\n\nfunction takeObject(idx) {\n  const ret = getObject(idx);\n  dropObject(idx);\n  return ret;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\nlet cachedTextDecoder = new lTextDecoder('utf-8', {\n  ignoreBOM: true,\n  fatal: true\n});\ncachedTextDecoder.decode();\nlet cachegetUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n/**\n*/\n\n\nexport function generateTestBlockchain() {\n  wasm.generateTestBlockchain();\n}\n/**\n* @returns {any}\n*/\n\nexport function getBalance() {\n  var ret = wasm.getBalance();\n  return takeObject(ret);\n}\n/**\n*/\n\nexport class BinaryWalletWrap {\n  constructor() {\n    throw new Error('cannot invoke `new` directly');\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_binarywalletwrap_free(ptr);\n  }\n\n}\nexport const __wbindgen_number_new = function (arg0) {\n  var ret = arg0;\n  return addHeapObject(ret);\n};\nexport const __wbindgen_object_drop_ref = function (arg0) {\n  takeObject(arg0);\n};\nexport const __wbindgen_throw = function (arg0, arg1) {\n  throw new Error(getStringFromWasm0(arg0, arg1));\n};","map":{"version":3,"sources":["/home/zander/Projects/artificialMind/celestium/celestium-wasm/pkg/celestium_wasm_bg.js"],"names":["wasm","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","Error","getObject","dropObject","takeObject","ret","lTextDecoder","TextDecoder","module","require","cachedTextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","memory","Uint8Array","getStringFromWasm0","ptr","len","subarray","generateTestBlockchain","getBalance","BinaryWalletWrap","constructor","free","__wbg_binarywalletwrap_free","__wbindgen_number_new","arg0","__wbindgen_object_drop_ref","__wbindgen_throw","arg1"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,0BAAtB;AAEA,MAAMC,IAAI,GAAG,IAAIC,KAAJ,CAAU,EAAV,EAAcC,IAAd,CAAmBC,SAAnB,CAAb;AAEAH,IAAI,CAACI,IAAL,CAAUD,SAAV,EAAqB,IAArB,EAA2B,IAA3B,EAAiC,KAAjC;AAEA,IAAIE,SAAS,GAAGL,IAAI,CAACM,MAArB;;AAEA,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AACxB,MAAIH,SAAS,KAAKL,IAAI,CAACM,MAAvB,EAA+BN,IAAI,CAACI,IAAL,CAAUJ,IAAI,CAACM,MAAL,GAAc,CAAxB;AAC/B,QAAMG,GAAG,GAAGJ,SAAZ;AACAA,EAAAA,SAAS,GAAGL,IAAI,CAACS,GAAD,CAAhB;AAEA,MAAI,OAAOJ,SAAP,KAAsB,QAA1B,EAAoC,MAAM,IAAIK,KAAJ,CAAU,cAAV,CAAN;AAEpCV,EAAAA,IAAI,CAACS,GAAD,CAAJ,GAAYD,GAAZ;AACA,SAAOC,GAAP;AACH;;AAED,SAASE,SAAT,CAAmBF,GAAnB,EAAwB;AAAE,SAAOT,IAAI,CAACS,GAAD,CAAX;AAAmB;;AAE7C,SAASG,UAAT,CAAoBH,GAApB,EAAyB;AACrB,MAAIA,GAAG,GAAG,EAAV,EAAc;AACdT,EAAAA,IAAI,CAACS,GAAD,CAAJ,GAAYJ,SAAZ;AACAA,EAAAA,SAAS,GAAGI,GAAZ;AACH;;AAED,SAASI,UAAT,CAAoBJ,GAApB,EAAyB;AACrB,QAAMK,GAAG,GAAGH,SAAS,CAACF,GAAD,CAArB;AACAG,EAAAA,UAAU,CAACH,GAAD,CAAV;AACA,SAAOK,GAAP;AACH;;AAED,MAAMC,YAAY,GAAG,OAAOC,WAAP,KAAuB,WAAvB,GAAqC,CAAC,GAAGC,MAAM,CAACC,OAAX,EAAoB,MAApB,EAA4BF,WAAjE,GAA+EA,WAApG;AAEA,IAAIG,iBAAiB,GAAG,IAAIJ,YAAJ,CAAiB,OAAjB,EAA0B;AAAEK,EAAAA,SAAS,EAAE,IAAb;AAAmBC,EAAAA,KAAK,EAAE;AAA1B,CAA1B,CAAxB;AAEAF,iBAAiB,CAACG,MAAlB;AAEA,IAAIC,oBAAoB,GAAG,IAA3B;;AACA,SAASC,eAAT,GAA2B;AACvB,MAAID,oBAAoB,KAAK,IAAzB,IAAiCA,oBAAoB,CAACE,MAArB,KAAgC1B,IAAI,CAAC2B,MAAL,CAAYD,MAAjF,EAAyF;AACrFF,IAAAA,oBAAoB,GAAG,IAAII,UAAJ,CAAe5B,IAAI,CAAC2B,MAAL,CAAYD,MAA3B,CAAvB;AACH;;AACD,SAAOF,oBAAP;AACH;;AAED,SAASK,kBAAT,CAA4BC,GAA5B,EAAiCC,GAAjC,EAAsC;AAClC,SAAOX,iBAAiB,CAACG,MAAlB,CAAyBE,eAAe,GAAGO,QAAlB,CAA2BF,GAA3B,EAAgCA,GAAG,GAAGC,GAAtC,CAAzB,CAAP;AACH;AACD;AACA;;;AACA,OAAO,SAASE,sBAAT,GAAkC;AACrCjC,EAAAA,IAAI,CAACiC,sBAAL;AACH;AAED;AACA;AACA;;AACA,OAAO,SAASC,UAAT,GAAsB;AACzB,MAAInB,GAAG,GAAGf,IAAI,CAACkC,UAAL,EAAV;AACA,SAAOpB,UAAU,CAACC,GAAD,CAAjB;AACH;AAED;AACA;;AACA,OAAO,MAAMoB,gBAAN,CAAuB;AAE1BC,EAAAA,WAAW,GAAG;AACV,UAAM,IAAIzB,KAAJ,CAAU,8BAAV,CAAN;AACH;;AAED0B,EAAAA,IAAI,GAAG;AACH,UAAMP,GAAG,GAAG,KAAKA,GAAjB;AACA,SAAKA,GAAL,GAAW,CAAX;;AAEA9B,IAAAA,IAAI,CAACsC,2BAAL,CAAiCR,GAAjC;AACH;;AAXyB;AAc9B,OAAO,MAAMS,qBAAqB,GAAG,UAASC,IAAT,EAAe;AAChD,MAAIzB,GAAG,GAAGyB,IAAV;AACA,SAAOhC,aAAa,CAACO,GAAD,CAApB;AACH,CAHM;AAKP,OAAO,MAAM0B,0BAA0B,GAAG,UAASD,IAAT,EAAe;AACrD1B,EAAAA,UAAU,CAAC0B,IAAD,CAAV;AACH,CAFM;AAIP,OAAO,MAAME,gBAAgB,GAAG,UAASF,IAAT,EAAeG,IAAf,EAAqB;AACjD,QAAM,IAAIhC,KAAJ,CAAUkB,kBAAkB,CAACW,IAAD,EAAOG,IAAP,CAA5B,CAAN;AACH,CAFM","sourcesContent":["import * as wasm from './celestium_wasm_bg.wasm';\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    if (typeof(heap_next) !== 'number') throw new Error('corrupt heap');\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n/**\n*/\nexport function generateTestBlockchain() {\n    wasm.generateTestBlockchain();\n}\n\n/**\n* @returns {any}\n*/\nexport function getBalance() {\n    var ret = wasm.getBalance();\n    return takeObject(ret);\n}\n\n/**\n*/\nexport class BinaryWalletWrap {\n\n    constructor() {\n        throw new Error('cannot invoke `new` directly');\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_binarywalletwrap_free(ptr);\n    }\n}\n\nexport const __wbindgen_number_new = function(arg0) {\n    var ret = arg0;\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n"]},"metadata":{},"sourceType":"module"}