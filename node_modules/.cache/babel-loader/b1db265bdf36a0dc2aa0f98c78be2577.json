{"ast":null,"code":"import * as wasm from './celestium_wasm_bg.wasm';\nconst heap = new Array(32).fill(undefined);\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) {\n  return heap[idx];\n}\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n  if (idx < 36) return;\n  heap[idx] = heap_next;\n  heap_next = idx;\n}\n\nfunction takeObject(idx) {\n  const ret = getObject(idx);\n  dropObject(idx);\n  return ret;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\nlet cachedTextDecoder = new lTextDecoder('utf-8', {\n  ignoreBOM: true,\n  fatal: true\n});\ncachedTextDecoder.decode();\nlet cachegetUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n  if (heap_next === heap.length) heap.push(heap.length + 1);\n  const idx = heap_next;\n  heap_next = heap[idx];\n  heap[idx] = obj;\n  return idx;\n}\n/**\n* @returns {BinaryWalletWrap}\n*/\n\n\nexport function generateTestBlockchain() {\n  var ret = wasm.generateTestBlockchain();\n  return BinaryWalletWrap.__wrap(ret);\n}\n/**\n*/\n\nexport class BinaryWalletWrap {\n  static __wrap(ptr) {\n    const obj = Object.create(BinaryWalletWrap.prototype);\n    obj.ptr = ptr;\n    return obj;\n  }\n\n  free() {\n    const ptr = this.ptr;\n    this.ptr = 0;\n\n    wasm.__wbg_binarywalletwrap_free(ptr);\n  }\n\n}\nexport const __wbindgen_object_drop_ref = function (arg0) {\n  takeObject(arg0);\n};\nexport const __wbindgen_string_new = function (arg0, arg1) {\n  var ret = getStringFromWasm0(arg0, arg1);\n  return addHeapObject(ret);\n};\nexport const __wbg_buffer_3f12a1c608c6d04e = function (arg0) {\n  var ret = getObject(arg0).buffer;\n  return addHeapObject(ret);\n};\nexport const __wbg_newwithbyteoffsetandlength_4c51342f87299c5a = function (arg0, arg1, arg2) {\n  var ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n  return addHeapObject(ret);\n};\nexport const __wbg_new_c6c0228e6d22a2f9 = function (arg0) {\n  var ret = new Uint8Array(getObject(arg0));\n  return addHeapObject(ret);\n};\nexport const __wbindgen_throw = function (arg0, arg1) {\n  throw new Error(getStringFromWasm0(arg0, arg1));\n};\nexport const __wbindgen_rethrow = function (arg0) {\n  throw takeObject(arg0);\n};\nexport const __wbindgen_memory = function () {\n  var ret = wasm.memory;\n  return addHeapObject(ret);\n};","map":{"version":3,"sources":["/home/zander/Projects/artificialMind/celestium/celestium-wasm/pkg/celestium_wasm_bg.js"],"names":["wasm","heap","Array","fill","undefined","push","getObject","idx","heap_next","length","dropObject","takeObject","ret","lTextDecoder","TextDecoder","module","require","cachedTextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","memory","Uint8Array","getStringFromWasm0","ptr","len","subarray","addHeapObject","obj","generateTestBlockchain","BinaryWalletWrap","__wrap","Object","create","prototype","free","__wbg_binarywalletwrap_free","__wbindgen_object_drop_ref","arg0","__wbindgen_string_new","arg1","__wbg_buffer_3f12a1c608c6d04e","__wbg_newwithbyteoffsetandlength_4c51342f87299c5a","arg2","__wbg_new_c6c0228e6d22a2f9","__wbindgen_throw","Error","__wbindgen_rethrow","__wbindgen_memory"],"mappings":"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","sourcesContent":["import * as wasm from './celestium_wasm_bg.wasm';\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n/**\n* @returns {BinaryWalletWrap}\n*/\nexport function generateTestBlockchain() {\n    var ret = wasm.generateTestBlockchain();\n    return BinaryWalletWrap.__wrap(ret);\n}\n\n/**\n*/\nexport class BinaryWalletWrap {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BinaryWalletWrap.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_binarywalletwrap_free(ptr);\n    }\n}\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbindgen_string_new = function(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport const __wbg_buffer_3f12a1c608c6d04e = function(arg0) {\n    var ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nexport const __wbg_newwithbyteoffsetandlength_4c51342f87299c5a = function(arg0, arg1, arg2) {\n    var ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nexport const __wbg_new_c6c0228e6d22a2f9 = function(arg0) {\n    var ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nexport const __wbindgen_rethrow = function(arg0) {\n    throw takeObject(arg0);\n};\n\nexport const __wbindgen_memory = function() {\n    var ret = wasm.memory;\n    return addHeapObject(ret);\n};\n\n"]},"metadata":{},"sourceType":"module"}