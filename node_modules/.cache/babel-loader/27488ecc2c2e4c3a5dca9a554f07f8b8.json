{"ast":null,"code":"const PC_CONFIG = {\n  iceServers: [{\n    urls: \"stun:stun.l.google.com:19302\"\n  }]\n};\nconst SIGNALING_SERVER_URL = \"http://192.168.1.152:9999\";\n\nclass Client {\n  constructor(PeerConnection, SessionDescription, iceCandidate, io) {\n    this.RTCPeerConnection = PeerConnection;\n    this.RTCSessionDescription = SessionDescription;\n    this.RTCIceCandidate = iceCandidate;\n    this.IO = io;\n    this.gotAnswer = null;\n    this.gotOffer = null;\n    this.gotCandidate = null;\n    this.gotDataChannel = null;\n    this.gotData = null;\n    this.channelClosed = null;\n    this.locked = false;\n    this.channel = null;\n    this.isDead = false;\n    this.closeSend = false;\n    this.peerId = null;\n    this.reInit();\n  }\n\n  reInit() {\n    let socket = celestiump2p.io(SIGNALING_SERVER_URL);\n    this.socket = socket;\n    this.locked = false;\n    this.isDead = false;\n    this.closeSend = false;\n    this.channel = null;\n    this.candidates = [];\n    this.socket.on(\"connect\", () => {\n      this.createOfferPeer(); //this.close();\n\n      this.socket.on(\"offer\", packet => {\n        if (!this.locked && packet.event && packet.event.meta_data && packet.event.data) {\n          if (this.gotOffer) {\n            let m = packet.event.meta_data;\n            m.id = packet.id;\n            let my_meta_data = this.gotOffer(m);\n\n            if (my_meta_data) {\n              this.candidates = [];\n\n              if (this.createAnswerPeer()) {\n                let rtcDec = packet.event.data;\n                this.localConnection.setRemoteDescription(rtcDec); //get candidates\n\n                this.peerId = packet.id;\n                this.sendAnswer(my_meta_data);\n              }\n            }\n          }\n        }\n      });\n      this.socket.on(\"answer\", packet => {\n        if (!this.locked && packet.event && packet.event.meta_data && packet.event.data) {\n          if (this.gotAnswer) {\n            let m = packet.event.meta_data;\n            m.id = packet.id;\n            let my_meta_data = this.gotAnswer(m);\n\n            if (my_meta_data != null) {\n              let rtcDec = new this.RTCSessionDescription(packet.event.data);\n              this.localConnection.setRemoteDescription(rtcDec); //get candidates\n\n              this.peerId = packet.id;\n              this.sendCandidate(my_meta_data);\n            }\n          }\n        }\n      });\n      this.socket.on(\"candidate\", packet => {\n        if (!this.locked && packet.event && packet.event.meta_data && packet.event.data && this.peerId == packet.id) {\n          if (this.gotCandidate) {\n            let m = packet.event.meta_data;\n            m.id = packet.id;\n            let my_meta_data = this.gotCandidate(m);\n\n            if (my_meta_data) {\n              this.localConnection.addIceCandidate(new this.RTCIceCandidate(packet.event.data));\n              this.sendCandidate(my_meta_data);\n            }\n          }\n        }\n      });\n\n      if (this.gotConnection) {\n        this.gotConnection();\n      }\n    });\n  }\n\n  createOfferPeer() {\n    try {\n      let pc = new this.RTCPeerConnection(PC_CONFIG);\n\n      if (this.localConnection) {\n        this.localConnection.close();\n      }\n\n      this.localConnection = pc;\n      this.channel = pc.createDataChannel(\"chat\");\n      var client = this;\n\n      this.channel.onopen = function (event) {\n        client.locked = true;\n\n        if (client.gotDataChannel) {\n          client.gotDataChannel();\n        }\n      };\n\n      this.channel.onclose = function (event) {\n        client.close();\n      };\n\n      this.channel.onmessage = function (event) {\n        if (client.gotData) {\n          client.gotData(event.data);\n        }\n      };\n\n      pc.onicecandidate = event => {\n        if (event.candidate) {\n          this.candidates.push(event.candidate);\n          console.log(\"candidate\", this.socket.id);\n        }\n      };\n\n      pc.oniceconnectionstatechange = function () {\n        if (pc.iceConnectionState == \"disconnected\") {\n          console.log(\"peer disconnected\");\n          this.close();\n        }\n      };\n\n      console.log(\"PeerConnection offer created\");\n      return true;\n    } catch (error) {\n      console.error(\"PeerConnection failed: \", error);\n      return false;\n    }\n  }\n\n  createAnswerPeer() {\n    try {\n      let pc = new this.RTCPeerConnection(PC_CONFIG);\n      this.localConnection = pc;\n      var client = this;\n\n      pc.ondatachannel = function (event) {\n        let channel = event.channel;\n        client.channel = channel;\n\n        channel.onopen = function (event) {\n          client.locked = true;\n\n          if (client.gotDataChannel) {\n            client.gotDataChannel();\n          }\n        };\n\n        channel.onclose = function (event) {\n          client.close();\n        };\n\n        channel.onmessage = function (event) {\n          if (client.gotData) {\n            client.gotData(event.data);\n          }\n        };\n      };\n\n      pc.onicecandidate = event => {\n        if (event.candidate) {\n          this.candidates.push(event.candidate);\n          console.log(\"candidate\", this.socket.id);\n        }\n      };\n\n      pc.oniceconnectionstatechange = function () {\n        if (pc.iceConnectionState == \"disconnected\") {\n          console.log(\"disconnection\");\n          this.close();\n        }\n      };\n\n      console.log(\"PeerConnection answer created\");\n      return true;\n    } catch (error) {\n      console.error(\"PeerConnection failed: \", error);\n      return false;\n    }\n  }\n\n  sendOffer(my_meta_data) {\n    console.log(\"Send offer\");\n    this.localConnection.createOffer().then(sessionDescription => {\n      let event = {\n        data: sessionDescription,\n        meta_data: my_meta_data\n      };\n      this.localConnection.setLocalDescription(sessionDescription);\n      this.sendSignalData(\"offer\", event);\n    });\n  }\n\n  sendAnswer(my_meta_data) {\n    console.log(\"Send Answer\");\n    this.localConnection.createAnswer().then(sessionDescription => {\n      let event = {\n        data: sessionDescription,\n        meta_data: my_meta_data\n      };\n      this.localConnection.setLocalDescription(sessionDescription);\n      this.sendSignalData(\"answer\", event);\n    });\n  }\n\n  sendSignalData(type, data) {\n    this.socket.emit(type, data);\n  }\n\n  send(data) {\n    if (this.channel && !this.isDead) {\n      this.channel.send(data);\n    }\n  }\n\n  close() {\n    this.isDead = true;\n    this.channel.close();\n    this.localConnection.close();\n    this.socket.disconnect();\n    this.pc = null;\n    this.channel = null;\n\n    if (this.channelClosed && !this.closeSend) {\n      this.channelClosed();\n      this.closeSend = true;\n    }\n  }\n\n  sendCandidate(my_meta_data) {\n    let can = this.candidates.pop();\n\n    if (can && !this.locked) {\n      console.log(\"sending candidate\", this.socket.id);\n      let event = {\n        data: can,\n        meta_data: my_meta_data\n      };\n      this.sendSignalData(\"candidate\", event);\n    }\n  }\n\n}\n\nconst celestiump2p = {\n  Client: Client,\n  RTCPeerConnection: null,\n  RTCSessionDescription: null,\n  RTCIceCandidate: null,\n  io: null,\n\n  initNewClient() {\n    return new celestiump2p.Client(celestiump2p.RTCPeerConnection, celestiump2p.RTCSessionDescription, celestiump2p.RTCIceCandidate, celestiump2p.io);\n  }\n\n};\nmodule.exports = celestiump2p;","map":{"version":3,"sources":["/home/zander/Projects/artificialMind/celestium/celestiump2p/main.js"],"names":["PC_CONFIG","iceServers","urls","SIGNALING_SERVER_URL","Client","constructor","PeerConnection","SessionDescription","iceCandidate","io","RTCPeerConnection","RTCSessionDescription","RTCIceCandidate","IO","gotAnswer","gotOffer","gotCandidate","gotDataChannel","gotData","channelClosed","locked","channel","isDead","closeSend","peerId","reInit","socket","celestiump2p","candidates","on","createOfferPeer","packet","event","meta_data","data","m","id","my_meta_data","createAnswerPeer","rtcDec","localConnection","setRemoteDescription","sendAnswer","sendCandidate","addIceCandidate","gotConnection","pc","close","createDataChannel","client","onopen","onclose","onmessage","onicecandidate","candidate","push","console","log","oniceconnectionstatechange","iceConnectionState","error","ondatachannel","sendOffer","createOffer","then","sessionDescription","setLocalDescription","sendSignalData","createAnswer","type","emit","send","disconnect","can","pop","initNewClient","module","exports"],"mappings":"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","sourcesContent":["const PC_CONFIG = {\n  iceServers: [\n    {\n      urls: \"stun:stun.l.google.com:19302\",\n    },\n  ],\n};\nconst SIGNALING_SERVER_URL = \"http://192.168.1.152:9999\";\n\nclass Client {\n  constructor(PeerConnection, SessionDescription, iceCandidate, io) {\n    this.RTCPeerConnection = PeerConnection;\n    this.RTCSessionDescription = SessionDescription;\n    this.RTCIceCandidate = iceCandidate;\n    this.IO = io;\n    this.gotAnswer = null;\n    this.gotOffer = null;\n    this.gotCandidate = null;\n    this.gotDataChannel = null;\n    this.gotData = null;\n    this.channelClosed = null;\n    this.locked = false;\n    this.channel = null;\n    this.isDead = false;\n    this.closeSend = false;\n    this.peerId = null;\n    this.reInit();\n  }\n  reInit() {\n    let socket = celestiump2p.io(SIGNALING_SERVER_URL);\n    this.socket = socket;\n    this.locked = false;\n    this.isDead = false;\n    this.closeSend = false;\n    this.channel = null;\n    this.candidates = [];\n    this.socket.on(\"connect\", () => {\n      this.createOfferPeer();\n      //this.close();\n      this.socket.on(\"offer\", (packet) => {\n        if (\n          !this.locked &&\n          packet.event &&\n          packet.event.meta_data &&\n          packet.event.data\n        ) {\n          if (this.gotOffer) {\n            let m = packet.event.meta_data;\n            m.id = packet.id;\n            let my_meta_data = this.gotOffer(m);\n            if (my_meta_data) {\n              this.candidates = [];\n              if (this.createAnswerPeer()) {\n                let rtcDec = packet.event.data;\n                this.localConnection.setRemoteDescription(rtcDec); //get candidates\n                this.peerId = packet.id;\n                this.sendAnswer(my_meta_data);\n              }\n            }\n          }\n        }\n      });\n      this.socket.on(\"answer\", (packet) => {\n        if (\n          !this.locked &&\n          packet.event &&\n          packet.event.meta_data &&\n          packet.event.data\n        ) {\n          if (this.gotAnswer) {\n            let m = packet.event.meta_data;\n            m.id = packet.id;\n            let my_meta_data = this.gotAnswer(m);\n            if (my_meta_data != null) {\n              let rtcDec = new this.RTCSessionDescription(packet.event.data);\n              this.localConnection.setRemoteDescription(rtcDec); //get candidates\n              this.peerId = packet.id;\n              this.sendCandidate(my_meta_data);\n            }\n          }\n        }\n      });\n      this.socket.on(\"candidate\", (packet) => {\n        if (\n          !this.locked &&\n          packet.event &&\n          packet.event.meta_data &&\n          packet.event.data &&\n          this.peerId == packet.id\n        ) {\n          if (this.gotCandidate) {\n            let m = packet.event.meta_data;\n            m.id = packet.id;\n            let my_meta_data = this.gotCandidate(m);\n            if (my_meta_data) {\n              this.localConnection.addIceCandidate(\n                new this.RTCIceCandidate(packet.event.data)\n              );\n              this.sendCandidate(my_meta_data);\n            }\n          }\n        }\n      });\n      if (this.gotConnection) {\n        this.gotConnection();\n      }\n    });\n  }\n  createOfferPeer() {\n    try {\n      let pc = new this.RTCPeerConnection(PC_CONFIG);\n      if (this.localConnection) {\n        this.localConnection.close();\n      }\n      this.localConnection = pc;\n      this.channel = pc.createDataChannel(\"chat\");\n      var client = this;\n      this.channel.onopen = function (event) {\n        client.locked = true;\n        if (client.gotDataChannel) {\n          client.gotDataChannel();\n        }\n      };\n      this.channel.onclose = function (event) {\n        client.close();\n      };\n      this.channel.onmessage = function (event) {\n        if (client.gotData) {\n          client.gotData(event.data);\n        }\n      };\n      pc.onicecandidate = (event) => {\n        if (event.candidate) {\n          this.candidates.push(event.candidate);\n          console.log(\"candidate\", this.socket.id);\n        }\n      };\n      pc.oniceconnectionstatechange = function () {\n        if (pc.iceConnectionState == \"disconnected\") {\n          console.log(\"peer disconnected\");\n          this.close();\n        }\n      };\n      console.log(\"PeerConnection offer created\");\n      return true;\n    } catch (error) {\n      console.error(\"PeerConnection failed: \", error);\n      return false;\n    }\n  }\n  createAnswerPeer() {\n    try {\n      let pc = new this.RTCPeerConnection(PC_CONFIG);\n      this.localConnection = pc;\n      var client = this;\n      pc.ondatachannel = function (event) {\n        let channel = event.channel;\n        client.channel = channel;\n        channel.onopen = function (event) {\n          client.locked = true;\n          if (client.gotDataChannel) {\n            client.gotDataChannel();\n          }\n        };\n        channel.onclose = function (event) {\n          client.close();\n        };\n        channel.onmessage = function (event) {\n          if (client.gotData) {\n            client.gotData(event.data);\n          }\n        };\n      };\n      pc.onicecandidate = (event) => {\n        if (event.candidate) {\n          this.candidates.push(event.candidate);\n          console.log(\"candidate\", this.socket.id);\n        }\n      };\n      pc.oniceconnectionstatechange = function () {\n        if (pc.iceConnectionState == \"disconnected\") {\n          console.log(\"disconnection\");\n          this.close();\n        }\n      };\n      console.log(\"PeerConnection answer created\");\n      return true;\n    } catch (error) {\n      console.error(\"PeerConnection failed: \", error);\n      return false;\n    }\n  }\n  sendOffer(my_meta_data) {\n    console.log(\"Send offer\");\n    this.localConnection.createOffer().then((sessionDescription) => {\n      let event = { data: sessionDescription, meta_data: my_meta_data };\n      this.localConnection.setLocalDescription(sessionDescription);\n      this.sendSignalData(\"offer\", event);\n    });\n  }\n  sendAnswer(my_meta_data) {\n    console.log(\"Send Answer\");\n    this.localConnection.createAnswer().then((sessionDescription) => {\n      let event = { data: sessionDescription, meta_data: my_meta_data };\n      this.localConnection.setLocalDescription(sessionDescription);\n      this.sendSignalData(\"answer\", event);\n    });\n  }\n  sendSignalData(type, data) {\n    this.socket.emit(type, data);\n  }\n\n  send(data) {\n    if (this.channel && !this.isDead) {\n      this.channel.send(data);\n    }\n  }\n\n  close() {\n    this.isDead = true;\n    this.channel.close();\n    this.localConnection.close();\n    this.socket.disconnect();\n    this.pc = null;\n    this.channel = null;\n    if (this.channelClosed && !this.closeSend) {\n      this.channelClosed();\n      this.closeSend = true;\n    }\n  }\n\n  sendCandidate(my_meta_data) {\n    let can = this.candidates.pop();\n    if (can && !this.locked) {\n      console.log(\"sending candidate\", this.socket.id);\n      let event = { data: can, meta_data: my_meta_data };\n      this.sendSignalData(\"candidate\", event);\n    }\n  }\n}\n\nconst celestiump2p = {\n  Client: Client,\n  RTCPeerConnection: null,\n  RTCSessionDescription: null,\n  RTCIceCandidate: null,\n  io: null,\n  initNewClient() {\n    return new celestiump2p.Client(\n      celestiump2p.RTCPeerConnection,\n      celestiump2p.RTCSessionDescription,\n      celestiump2p.RTCIceCandidate,\n      celestiump2p.io\n    );\n  },\n};\n\nmodule.exports = celestiump2p;\n"]},"metadata":{},"sourceType":"script"}