{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/zander/Projects/artificialMind/celestium/celestium_frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport logo from \"./logo.svg\";\nimport \"./App.css\"; // var celestiump2p = require('celestiump2p');\n\nimport * as celestiumClient from 'celestiump2p';\nimport { io } from 'socket.io-client';\n\nfunction App() {\n  _s();\n\n  useEffect(() => {\n    let state = {\n      meta_data: {\n        block_chain_len: 0\n      },\n      block_chain: null\n    };\n    celestiumClient.RTCPeerConnection = RTCPeerConnection;\n    celestiumClient.RTCSessionDescription = RTCSessionDescription;\n    celestiumClient.RTCIceCandidate = RTCIceCandidate;\n    celestiumClient.io = io;\n    let c1 = celestiumClient.initNewClient();\n\n    c1.gotConnection = () => {\n      c1.sendOffer(state.meta_data);\n    };\n\n    c1.gotOffer = other_meta_data => {\n      console.log(\"recived meta data on offer\", other_meta_data);\n      return state.meta_data;\n    };\n\n    c1.gotAnswer = other_meta_data => {\n      console.log(\"recived meta data on answer\", other_meta_data);\n      return state.meta_data;\n    };\n\n    c1.gotCandidate = other_meta_data => {\n      console.log(\"recived meta data on candidate\", other_meta_data);\n      return state.meta_data;\n    };\n\n    c1.gotDataChannel = () => {\n      c1.send(\"ping\");\n    };\n\n    c1.gotData = data => {\n      console.log(data);\n\n      if (data === \"ping\") {\n        c1.send(\"pong\");\n      } else {\n        c1.send(\"ping\");\n      }\n    };\n\n    c1.channelClosed = () => {\n      console.log(\"channel closed\");\n      c1 = null;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"src/App.js\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 16\n        }, this), \" and save to reload.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"App-link\",\n        href: \"https://reactjs.org\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Learn React\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/zander/Projects/artificialMind/celestium/celestium_frontend/src/App.js"],"names":["useEffect","celestiumClient","io","App","state","meta_data","block_chain_len","block_chain","RTCPeerConnection","RTCSessionDescription","RTCIceCandidate","c1","initNewClient","gotConnection","sendOffer","gotOffer","other_meta_data","console","log","gotAnswer","gotCandidate","gotDataChannel","send","gotData","data","channelClosed","logo"],"mappings":";;;;;AAAA,SAAQA,SAAR,QAAwB,OAAxB;;AAEA,OAAO,WAAP,C,CACA;;AACA,OAAO,KAAKC,eAAZ,MAAiC,cAAjC;AACA,SAASC,EAAT,QAAmB,kBAAnB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACbH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,KAAK,GAAG;AACVC,MAAAA,SAAS,EAAE;AACTC,QAAAA,eAAe,EAAE;AADR,OADD;AAIVC,MAAAA,WAAW,EAAE;AAJH,KAAZ;AAOAN,IAAAA,eAAe,CAACO,iBAAhB,GAAoCA,iBAApC;AACAP,IAAAA,eAAe,CAACQ,qBAAhB,GAAwCA,qBAAxC;AACAR,IAAAA,eAAe,CAACS,eAAhB,GAAkCA,eAAlC;AACAT,IAAAA,eAAe,CAACC,EAAhB,GAAqBA,EAArB;AAEA,QAAIS,EAAE,GAAGV,eAAe,CAACW,aAAhB,EAAT;;AACAD,IAAAA,EAAE,CAACE,aAAH,GAAmB,MAAM;AACvBF,MAAAA,EAAE,CAACG,SAAH,CAAaV,KAAK,CAACC,SAAnB;AACD,KAFD;;AAGAM,IAAAA,EAAE,CAACI,QAAH,GAAeC,eAAD,IAAqB;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CF,eAA1C;AACA,aAAOZ,KAAK,CAACC,SAAb;AACD,KAHD;;AAIAM,IAAAA,EAAE,CAACQ,SAAH,GAAgBH,eAAD,IAAqB;AAClCC,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CF,eAA3C;AACA,aAAOZ,KAAK,CAACC,SAAb;AACD,KAHD;;AAIAM,IAAAA,EAAE,CAACS,YAAH,GAAmBJ,eAAD,IAAqB;AACrCC,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CF,eAA9C;AACA,aAAOZ,KAAK,CAACC,SAAb;AACD,KAHD;;AAIAM,IAAAA,EAAE,CAACU,cAAH,GAAoB,MAAM;AACxBV,MAAAA,EAAE,CAACW,IAAH,CAAQ,MAAR;AACD,KAFD;;AAGAX,IAAAA,EAAE,CAACY,OAAH,GAAcC,IAAD,IAAU;AACrBP,MAAAA,OAAO,CAACC,GAAR,CAAYM,IAAZ;;AACA,UAAIA,IAAI,KAAK,MAAb,EAAqB;AACnBb,QAAAA,EAAE,CAACW,IAAH,CAAQ,MAAR;AACD,OAFD,MAEO;AACLX,QAAAA,EAAE,CAACW,IAAH,CAAQ,MAAR;AACD;AACF,KAPD;;AASAX,IAAAA,EAAE,CAACc,aAAH,GAAmB,MAAM;AACvBR,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAP,MAAAA,EAAE,GAAG,IAAL;AACD,KAHD;AAID,GA7CQ,EA6CN,EA7CM,CAAT;AA8CA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACE;AAAK,QAAA,GAAG,EAAEe,IAAV;AAAgB,QAAA,SAAS,EAAC,UAA1B;AAAqC,QAAA,GAAG,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,yCACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADP;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAKE;AACE,QAAA,SAAS,EAAC,UADZ;AAEE,QAAA,IAAI,EAAC,qBAFP;AAGE,QAAA,MAAM,EAAC,QAHT;AAIE,QAAA,GAAG,EAAC,qBAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GAjEQvB,G;;KAAAA,G;AAmET,eAAeA,GAAf","sourcesContent":["import {useEffect} from 'react';\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n// var celestiump2p = require('celestiump2p');\nimport * as celestiumClient from 'celestiump2p';\nimport { io } from 'socket.io-client';\n\nfunction App() {\n  useEffect(() => {\n    let state = {\n      meta_data: {\n        block_chain_len: 0,\n      },\n      block_chain: null,\n    };\n    \n    celestiumClient.RTCPeerConnection = RTCPeerConnection;\n    celestiumClient.RTCSessionDescription = RTCSessionDescription;\n    celestiumClient.RTCIceCandidate = RTCIceCandidate;\n    celestiumClient.io = io;\n    \n    let c1 = celestiumClient.initNewClient();\n    c1.gotConnection = () => {\n      c1.sendOffer(state.meta_data);\n    };\n    c1.gotOffer = (other_meta_data) => {\n      console.log(\"recived meta data on offer\", other_meta_data);\n      return state.meta_data;\n    };\n    c1.gotAnswer = (other_meta_data) => {\n      console.log(\"recived meta data on answer\", other_meta_data);\n      return state.meta_data;\n    };\n    c1.gotCandidate = (other_meta_data) => {\n      console.log(\"recived meta data on candidate\", other_meta_data);\n      return state.meta_data;\n    };\n    c1.gotDataChannel = () => {\n      c1.send(\"ping\");\n    };\n    c1.gotData = (data) => {\n      console.log(data);\n      if (data === \"ping\") {\n        c1.send(\"pong\");\n      } else {\n        c1.send(\"ping\");\n      }\n    };\n    \n    c1.channelClosed = () => {\n      console.log(\"channel closed\");\n      c1 = null;\n    }\n  }, []);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}